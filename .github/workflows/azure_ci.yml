name: Azure CI P7 Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: true
        default: 'dev'
      model_path:
        description: 'Path to the MLflow model'
        required: true
        default: 'mlflow_model/'  # Default path

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        pip install azureml-sdk mlflow

    - name: Run tests
      run: |
        pytest pytest_tests.py --cov=pipeline --cov-report=xml

    # Log the model_path input
    - name: Log Model Path
      run: |
        echo "Model Path: ${{ github.event.inputs.model_path }}"

    # List the files in the model path directory to verify if the model is there
    - name: List files in model path
      run: |
        ls -R ${{ github.event.inputs.model_path }}

    - name: Authenticate with Azure
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az account show  # Check authentication success

    - name: Install Azure ML CLI extension
      run: |
        az extension add --name ml

    - name: Update Azure CLI
      run: |
        az upgrade --yes

    - name: Check if model version 20 exists
      run: |
        model_version=$(az ml model show --name P7-mlflow-model --workspace-name P7_Scoring --resource-group Maud --query "version" -o tsv)
        if [[ "$model_version" == "20" ]]; then
            echo "Version 20 already exists, skipping registration."
        else
            echo "Version 20 not found, registering the model."
            az ml model create --name P7-mlflow-model --path ${{ github.event.inputs.model_path }}/model.pkl --workspace-name P7_Scoring --resource-group Maud
        fi

    - name: Deploy Model to Azure ML
      if: success()  # Execute only if model registration is successful
      run: |
        # Ensure the correct extension is installed
        az extension add --name ml

        # Check if the endpoint exists
        if az ml online-endpoint show --name mlflow-endpoint-scoring --workspace-name P7_Scoring --resource-group Maud > /dev/null 2>&1; then
            echo "Endpoint already exists."

            # If endpoint is stuck, delete it and recreate it
            az ml online-endpoint delete --name mlflow-endpoint-scoring --workspace-name P7_Scoring --resource-group Maud --yes
            sleep 40  # Allow some time for deletion

            echo "Recreating the endpoint..."
            az ml online-endpoint create --name mlflow-endpoint-scoring \
                --workspace-name P7_Scoring \
                --resource-group Maud \
                --auth-mode key
        else
            echo "Creating new endpoint..."
            az ml online-endpoint create --name mlflow-endpoint-scoring \
                --workspace-name P7_Scoring \
                --resource-group Maud \
                --auth-mode key
        fi

        # Check if the deployment exists
        if az ml online-deployment show --name mlflow-deployment --endpoint-name mlflow-endpoint-scoring --workspace-name P7_Scoring --resource-group Maud > /dev/null 2>&1; then
            echo "Deployment exists. Updating it..."
            
            # Delete the existing deployment before updating if it's stuck or failed
            az ml online-deployment delete --name mlflow-deployment --endpoint-name mlflow-endpoint-scoring --workspace-name P7_Scoring --resource-group Maud --yes
            sleep 30  # Wait for deletion to complete

            # Recreate the deployment
            az ml online-deployment update --name mlflow-deployment \
                --endpoint-name mlflow-endpoint-scoring \
                --workspace-name P7_Scoring \
                --resource-group Maud \
                --file deployment.yaml
        else
            echo "Deployment does not exist. Creating it..."
            az ml online-deployment create --file deployment.yaml \
                --workspace-name P7_Scoring \
                --resource-group Maud
        fi

        # Set the new deployment as the default
        az ml online-endpoint update --name mlflow-endpoint-scoring \
            --workspace-name P7_Scoring \
            --resource-group Maud \
            --set defaults.deployment_name=mlflow-deployment

        # Check the deployment status
        az ml online-endpoint show --name mlflow-endpoint-scoring --workspace-name P7_Scoring --resource-group Maud
